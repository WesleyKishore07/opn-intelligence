name: Build and deploy service for opn-intelligence
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "main"
      parent_module:
        description: "Parent module to deploy"
        required: true
        default: "app_services_parent"
      service:
        description: "Service to deploy"
        required: true
        type: choice
        options:
          - shipment
          # - infinity
          # - onboarding
          # - operations
          # - pre_onboarding
          # - settlement      
        default: "shipment"
permissions:
  id-token: write
  contents: write
  pull-requests: write
  checks: write
jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_ENV: ${{ steps.set-deploy-env.outputs.DEPLOY_ENV }}
      JOB_STATUS: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'
          ref: ${{ github.ref }}

      - name: Set deploy environment
        id: set-deploy-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_ENV=main" >> $GITHUB_ENV
            echo "DEPLOY_ENV=main" >> $GITHUB_OUTPUT
          fi
          
      - name: Prod Deployment Check
        if: ${{ env.DEPLOY_ENV == 'prod' || startsWith(env.DEPLOY_ENV, 'prod') }}
        run: |
          CODEOWNERS=$(grep -v '^#' .github/CODEOWNERS | awk '{print $NF}' | sort | uniq)
          
          if ! echo "$CODEOWNERS" | grep -w "${{ github.actor }}"; then
            echo "❌ You are not authorised to do the deployment in the production"
            exit 1
          else
            echo "✅ Authorised to do the deployment in the production - ${{ github.actor }}"
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          cache: "pip"
          
      - name: Install python cache packages 
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -r requirements/requirements-dev.txt

      - name: Debug file structure
        run: ls -lR
        working-directory: /home/runner/work/opn-intelligence
        
      - name: Debug directory structure
        run: |
          ls -l /home/runner/work/opn-intelligence/opn-intelligence || echo "Directory not found"
          ls -l /home/runner/work/opn-intelligence/opn-intelligence/app_services_parent || echo "app_services_parent directory not found"

      - name: List available tasks
        working-directory: .
        run: pytest --collect-only

      - name: Run tests and generate coverage
        working-directory: .
        run: |
          pytest --cov=app_services_parent --cov-report=xml --cov-report=html --junitxml=test-results/junit-report.xml

      - name: Generating the coverage report
        working-directory: .
        run: |
          coverage report -m     
          coverage xml -o coverage.xml 

      - name: publish the test reports
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: "app_services_parent/${{ github.event.inputs.service }}/test-results/**/*.xml"
          report_individual_runs: true
          check_name: "Test Results"
      
      - name: Debug test results path
        run: ls -lah app_services_parent/shipment/test-results/

      - name: Run Pytest with JUnit report
        run: |
          pytest --junitxml=app_services_parent/${{ github.event.inputs.service }}/test-results/results.xml

      - name: Generate the Summary report
        id: report
        run: |
          {
            echo "# Pull Request Quality Check Summary"  
            echo "Build: #${GITHUB_RUN_NUMBER} - ${GITHUB_SHA::7}"  
            echo ""  

            # Printing the table Header  
            echo "| Module | Tests | Coverage | Quality Issues | Status | Reports |"  
            echo "|--------|-------|----------|----------------|--------|---------|"  

            # Initialize variables  
            total_all_tests=0  
            total_all_passed=0  
            total_overall_coverage=0  
            module_count=0  

            # Check if the base directory exists  
            if [ ! -d "./opn-intelligence/app_services_parent" ]; then  
                echo "Target directory not found. Skipping module processing."  
                exit 0  # or handle gracefully  
            fi  

            # Process each module  
            while IFS= read -r module_path; do  
                if [ -d "$module_path" ]; then  
                    module_name=$(basename "$(dirname "$module_path")")  
                    
                    # Create report artifact links  
                    artifacts_base="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"  
                    test_link="$artifacts_base"  
                    coverage_link="$artifacts_base"  
                    quality_link="$artifacts_base"  

                    # Test Results  
                    test_results=0  
                    test_failures=0  
                    test_passed=0  

                    while IFS=read -r test_file; do  
                        if [ -f "$test_file" ]; then  
                            tests=$(grep -oP 'tests="[^"]+' "$test_file" | awk -F'"' '{print $2}' || echo "0")  
                            failures=$(grep -oP 'failures="[^"]+' "$test_file" | awk -F'"' '{print $2}' || echo "0")  
                            errors=$(grep -oP 'errors="[^"]+' "$test_file" | awk -F'"' '{print $2}' || echo "0")  

                            test_results=$((test_results + ${tests:-0}))  
                            test_failures=$((test_failures + ${failures:-0} + ${errors:-0}))  
                        fi              
                    done < <(find "$(dirname "$module_path")" -name "TEST_*.xml" 2>/dev/null)  

                    test_passed=$((test_results - test_failures))  

                    # Coverage  
                    coverage=0  
                    coverage_file=$(find "$(dirname "$module_path")" -name "coverage.xml" 2> /dev/null)  
                    if [ -f "$coverage_file" ]; then  
                        coverage=$(grep -oP '(?<=Line-rate=")[^"]+' "$coverage_file" | awk '{print $1*100}' | head -1)  
                        coverage=${coverage:-0}  
                    fi  

                    # Quality Reports  
                    flake8_file="$(dirname "$module_path")/flake8_report.txt"  
                    pylint_file="$(dirname "$module_path")/pylint_report.txt"  
                    bandit_file="$(dirname "$module_path")/bandit_report.txt"  

                    flake8_count=0  
                    pylint_count=0  
                    bandit_count=0  
                    declare -a quality_issues=()  

                    if [ -f "$flake8_file" ]; then  
                        flake8_count=$(wc -l < "$flake8_file" || echo 0)  
                        while IFS= read -r line; do  
                            quality_issues+=("Flake8: $line")  
                        done < "$flake8_file"  
                    fi  

                    if [ -f "$pylint_file" ]; then  
                        pylint_count=$(grep -c "^[EWCR]" "$pylint_file" || echo "0")  
                        while IFS= read -r line; do  
                            quality_issues+=("Pylint: $line")  
                        done < <(grep "^[EWCR]" "$pylint_file" | head -5)  
                    fi  

                    if [ -f "$bandit_file" ]; then  
                        bandit_count=$(grep -c "Issue:" "$bandit_file" || echo "0")  
                        while IFS= read -r line; do  
                            quality_issues+=("Bandit: $line")  
                        done < <(grep "Issue:" "$bandit_file" | head -5)  
                    fi  

                    # Calculation status  
                    test_status="✅"  
                    [ "$test_failures" -gt 0 ] && test_status="❌"  
                    [ "$test_results" -eq 0 ] && test_status="❌"  

                    coverage_status="✅"  
                    [ "$coverage" -lt 80 ] && coverage_status="❌"  

                    quality_status="✅"  
                    [ "$((flake8_count + pylint_count + bandit_count))" -gt 0 ] && quality_status="❌"  

                    overall_status="✅"  
                    [[ "$test_status" == "❌" || "$coverage_status" == "❌" || "$quality_status" == "❌" ]] && overall_status="❌"  

                    # Print module report  
                    echo "| $module_name | $test_passed/$test_results $test_status | ${coverage}% $coverage_status | Flake8:$flake8_count, Pylint:$pylint_count, Bandit:$bandit_count $quality_status | $overall_status | [Reports]($artifacts_base) |"  

                    # Adding issue summary  
                    if [ ${#quality_issues[@]} -gt 0 ]; then  
                        echo ""  
                        echo "Quality Issues Summary"  
                        echo "| Issue |"  
                        echo "|-------|"  
                        for issue in "${quality_issues[@]}"; do  
                            echo "| $issue |"  
                        done  
                        echo "</details>"  
                        echo ""  
                    fi  

                    total_all_tests=$((total_all_tests + test_results))  
                    total_all_passed=$((total_all_passed + test_passed))  
                    total_overall_coverage=$((total_overall_coverage + coverage))  
                    module_count=$((module_count + 1))  
                fi  
            done < <(find ./opn-intelligence/app_services_parent -type d -name "reports" -exec dirname {} \; | sort -u)  

            # Calculating overall metrics  
            [ "$module_count" -gt 0 ] && avg_coverage=$((total_overall_coverage / module_count)) || avg_coverage=0  
            [ "$total_all_tests" -gt 0 ] && overall_pass_rate=$((total_all_passed * 100 / total_all_tests)) || overall_pass_rate=100  
            total_quality_issues=$((flake8_count + pylint_count + bandit_count))  

            echo "- Total Tests: $total_all_passed/$total_all_tests (${overall_pass_rate}%)"  
            echo "- Average Coverage: ${avg_coverage}%"  
            echo "- Total Quality Issues: Flake8:$flake8_count, Pylint:$pylint_count, Bandit:$bandit_count"  
            echo ""  

            echo "## Quick Actions Required"  
            echo ""  

            # Add quick actions with direct artifact links  
            [ "$overall_pass_rate" -lt 100 ] && echo "- [ ] Fix failing tests ([View Reports]($artifacts_base))"  
            [ "$avg_coverage" -lt 80 ] && echo "- [ ] Improve code coverage ([View Reports]($artifacts_base))"  
            [ "$total_quality_issues" -gt 0 ] && echo "- [ ] Address code quality issues ([View Reports]($artifacts_base))"  

            echo ""  
            echo "## Build Information"  
            echo "- Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"  
            echo "- Pipeline Link: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"  
            echo ""  
            echo "To merge this PR, all checks must pass their thresholds."  

            # Save report content for PR comment  
            {  
                echo "report_content<<EOF"  
                cat report.md  
                echo "EOF"  
            } > $GITHUB_OUTPUT  
            echo "# Pull Request Quality Check Summary"
            echo "Build: #${GITHUB_RUN_NUMBER} - ${GITHUB_SHA::7}"
            echo ""

            # PRinting the table HEader
            echo "| Module | Tests | Coverage | Quality Issues | Status | Reports |"
            echo "|--------|-------|----------|----------------|--------|---------|"

            #Process each module
            while IFS= read -r module_path; do
          #!/bin/bash
          
          TARGET_DIR="$GITHUB_WORKSPACE/app_services_parent"
          
          # Debugging: Check if the target directory exists
          echo "🔍 Checking workspace structure..."
          ls -l "$GITHUB_WORKSPACE"
          
          if [ ! -d "$TARGET_DIR" ]; then
              echo "❌ Error: Directory $TARGET_DIR not found!"
              exit 1  # Stop execution if the directory is missing
          fi
          
          echo "# Pull Request Quality Check Summary" > report.md
          echo "Build: #${GITHUB_RUN_NUMBER} - ${GITHUB_SHA::7}" >> report.md
          echo "" >> report.md
          
          # Printing the table header
          echo "| Module | Tests | Coverage | Quality Issues | Status | Reports |" >> report.md
          echo "|--------|-------|----------|----------------|--------|---------|" >> report.md
          
          # Initialize variables
          total_all_tests=0
          total_all_passed=0
          total_overall_coverage=0
          module_count=0
          
          # Debugging: Verify base directory structure
          echo "🔍 Searching for modules inside $TARGET_DIR..."
          find "$TARGET_DIR" -type d -name "reports" -exec dirname {} \; | sort -u
          
          # Process each module
          while IFS= read -r module_path; do
              if [ -d "$module_path" ]; then
                  module_name=$(basename "$(dirname "$module_path")")
          
                  # Create report artifact links
                  artifacts_base="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          
                  # Test Results
                  test_results=0
                  test_failures=0
                  test_passed=0
          
                  echo "🔍 Checking for test reports in $(dirname "$module_path")"
                  find "$(dirname "$module_path")" -name "TEST_*.xml" -print
          
                  while IFS= read -r test_file; do
                      if [ -f "$test_file" ]; then
                          tests=$(grep -oP 'tests="[^"]+' "$test_file" | awk -F'"' '{print $2}' || echo "0")
                          failures=$(grep -oP 'failures="[^"]+' "$test_file" | awk -F'"' '{print $2}' || echo "0")
                          errors=$(grep -oP 'errors="[^"]+' "$test_file" | awk -F'"' '{print $2}' || echo "0")
          
                          test_results=$((test_results + ${tests:-0}))
                          test_failures=$((test_failures + ${failures:-0} + ${errors:-0}))
                      fi
                  done < <(find "$(dirname "$module_path")" -name "TEST_*.xml" 2>/dev/null)
          
                  test_passed=$((test_results - test_failures))
          
                  # Coverage
                  coverage=0
                  coverage_file=$(find "$(dirname "$module_path")" -name "coverage.xml" 2>/dev/null | head -1)
          
                  if [ -f "$coverage_file" ]; then
                      coverage=$(grep -oP '(?<=Line-rate=")[^"]+' "$coverage_file" | awk '{print $1*100}' | head -1)
                      coverage=${coverage:-0}
                  else
                      echo "⚠️ Warning: No coverage.xml found for $module_name"
                  fi
          
                  # Quality Reports
                  flake8_file="$(dirname "$module_path")/flake8_report.txt"
                  pylint_file="$(dirname "$module_path")/pylint_report.txt"
                  bandit_file="$(dirname "$module_path")/bandit_report.txt"
          
                  flake8_count=0
                  pylint_count=0
                  bandit_count=0
                  declare -a quality_issues=()
          
                  if [ -f "$flake8_file" ]; then
                      flake8_count=$(wc -l < "$flake8_file" || echo 0)
                      while IFS= read -r line; do
                          quality_issues+=("Flake8: $line")
                      done < "$flake8_file"
                  fi
          
                  if [ -f "$pylint_file" ]; then
                      pylint_count=$(grep -c "^[EWCR]" "$pylint_file" || echo "0")
                      while IFS= read -r line; do
                          quality_issues+=("Pylint: $line")
                      done < <(grep "^[EWCR]" "$pylint_file" | head -5)
                  fi
          
                  if [ -f "$bandit_file" ]; then
                      bandit_count=$(grep -c "Issue:" "$bandit_file" || echo "0")
                      while IFS= read -r line; do
                          quality_issues+=("Bandit: $line")
                      done < <(grep "Issue:" "$bandit_file" | head -5)
                  fi
          
                  # Ensure variables are always numeric
                  flake8_count=${flake8_count:-0}
                  pylint_count=${pylint_count:-0}
                  bandit_count=${bandit_count:-0}
          
                  # Determine status
                  test_status="✅"
                  [ "$test_failures" -gt 0 ] && test_status="❌"
                  [ "$test_results" -eq 0 ] && test_status="❌"
          
                  coverage_status="✅"
                  [ "$coverage" -lt 80 ] && coverage_status="❌"
          
                  quality_status="✅"
                  [ "$((flake8_count + pylint_count + bandit_count))" -gt 0 ] && quality_status="❌"
          
                  overall_status="✅"
                  [[ "$test_status" == "❌" || "$coverage_status" == "❌" || "$quality_status" == "❌" ]] && overall_status="❌"
          
                  # Print module report
                  echo "| $module_name | $test_passed/$test_results $test_status | ${coverage}% $coverage_status | Flake8:$flake8_count, Pylint:$pylint_count, Bandit:$bandit_count $quality_status | $overall_status | [Reports]($artifacts_base) |" >> report.md
          
                  # Adding issue summary
                  if [ ${#quality_issues[@]} -gt 0 ]; then
                      echo "" >> report.md
                      echo "### Quality Issues Summary" >> report.md
                      echo "| Issue |" >> report.md
                      echo "|-------|" >> report.md
                      for issue in "${quality_issues[@]}"; do
                          echo "| $issue |" >> report.md
                      done
                      echo "" >> report.md
                  fi
          
                  total_all_tests=$((total_all_tests + test_results))
                  total_all_passed=$((total_all_passed + test_passed))
                  total_overall_coverage=$((total_overall_coverage + coverage))
                  module_count=$((module_count + 1))
              fi
          done < <(find "$TARGET_DIR" -type d -name "reports" -exec dirname {} \; | sort -u)
          
          # Overall Metrics
          avg_coverage=$((module_count > 0 ? total_overall_coverage / module_count : 0))
          overall_pass_rate=$((total_all_tests > 0 ? total_all_passed * 100 / total_all_tests : 100))
          total_quality_issues=$((flake8_count + pylint_count + bandit_count))
          
          echo "- Total Tests: $total_all_passed/$total_all_tests (${overall_pass_rate}%)" >> report.md
          echo "- Average Coverage: ${avg_coverage}%" >> report.md
          echo "- Total Quality Issues: Flake8:$flake8_count, Pylint:$pylint_count, Bandit:$bandit_count" >> report.md
          echo "" >> report.md
          
          # Quick Actions
          echo "## Quick Actions Required" >> report.md
          [ "$overall_pass_rate" -lt 100 ] && echo "- [ ] Fix failing tests ([View Reports]($artifacts_base))" >> report.md
          [ "$avg_coverage" -lt 80 ] && echo "- [ ] Improve code coverage ([View Reports]($artifacts_base))" >> report.md
          [ "$total_quality_issues" -gt 0 ] && echo "- [ ] Address code quality issues ([View Reports]($artifacts_base))" >> report.md
          
          echo "- Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> report.md
          echo "- Pipeline Link: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> report.md

      - name: Save report content for PR comment
        run: |
          if [ -f "report.md" ]; then
            {
              echo "report_content<<EOF"
              cat report.md
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          else
            echo "❌ Error: report.md not found!" >&2
            exit 1
          fi
        shell: bash

      - name: Prepare and Upload Reports
        if: always()
        shell: bash
        run: |
          UPLOAD_DIR="quality-reports"
          rm -rf "$UPLOAD_DIR"
          mkdir -p "$UPLOAD_DIR"

          # Ensure parent directory exists before proceeding
          PARENT_DIR="./app_services_parent"

          if [ ! -d "$PARENT_DIR" ]; then
              echo "Error: Directory $PARENT_DIR not found!"
              exit 1  # Exit to prevent further errors
          fi

          # Find parent modules
          parent_modules=$(find "$PARENT_DIR" -maxdepth 1 -type d)

          # Create main index template
          cat > index_template.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Quality Reports</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      margin: 20px;
                      line-height: 1.6;
                  }
                  h1 {
                      color: #333;
                      border-bottom: 2px solid #eee;
                      padding-bottom: 10px;
                  }
                  .report-link {
                      display: block;
                      margin: 10px 0;
                      padding: 15px;
                      background: #f5f5f5;
                      border-radius: 5px;
                      text-decoration: none;
                      color: #333;
                      transition: background-color 0.2s ease;
                  }
                  .report-link:hover {
                      background: #e0e0e0;
                  }
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>MODULE_TITLE</h1>
                  REPORT_LINKS
              </div>
          </body>
          </html>
          EOL

          process_module() {
              local module_dir="$1"
              local module_name=$(basename "$module_dir")

              echo "Processing module: $module_name"
              local module_reports="$UPLOAD_DIR/$module_name"
              mkdir -p "$module_reports"

              # Copy test results (pytest JUnit XML format)
              if [ -f "$module_dir/test-results/results.xml" ]; then
                  mkdir -p "$module_reports/tests"
                  cp "$module_dir/test-results/results.xml" "$module_reports/tests/" || true
              fi

              # Copy coverage report (HTML)
              if [ -d "$module_dir/test-results/coverage" ]; then
                  mkdir -p "$module_reports/coverage"
                  cp -r "$module_dir/test-results/coverage/"* "$module_reports/coverage/" || true
              fi

              # Copy quality reports
              mkdir -p "$module_reports/quality"

              # Flake8 (Style issues)
              if [ -f "$module_dir/test-results/flake8-report.txt" ]; then
                  mkdir -p "$module_reports/quality/flake8"
                  cp "$module_dir/test-results/flake8-report.txt" "$module_reports/quality/flake8/" || true
              fi

              # Pylint (Static analysis)
              if [ -f "$module_dir/test-results/pylint-report.txt" ]; then
                  mkdir -p "$module_reports/quality/pylint"
                  cp "$module_dir/test-results/pylint-report.txt" "$module_reports/quality/pylint/" || true
              fi

              # Bandit (Security analysis)
              if [ -f "$module_dir/test-results/bandit-report.txt" ]; then
                  mkdir -p "$module_reports/quality/bandit"
                  cp "$module_dir/test-results/bandit-report.txt" "$module_reports/quality/bandit/" || true
              fi

              # Create index.html if we have reports
              if [ "$(find "$module_reports" -type f | wc -l)" -gt 0 ]; then
                  report_links=""
                  [ -f "$module_reports/tests/results.xml" ] && report_links+="                      <a class=\"report-link\" href=\"tests/results.xml\">Test Report (JUnit)</a>\\n"
                  [ -d "$module_reports/coverage" ] && report_links+="                      <a class=\"report-link\" href=\"coverage/index.html\">Coverage Report</a>\\n"
                  [ -f "$module_reports/quality/flake8/flake8-report.txt" ] && report_links+="                      <a class=\"report-link\" href=\"quality/flake8/flake8-report.txt\">Flake8 Report</a>\\n"
                  [ -f "$module_reports/quality/pylint/pylint-report.txt" ] && report_links+="                      <a class=\"report-link\" href=\"quality/pylint/pylint-report.txt\">Pylint Report</a>\\n"
                  [ -f "$module_reports/quality/bandit/bandit-report.txt" ] && report_links+="                      <a class=\"report-link\" href=\"quality/bandit/bandit-report.txt\">Bandit Report</a>\\n"

                  # Create index.html from template
                  sed -e "s|MODULE_TITLE|Quality Reports - $module_name|" \
                      -e "s|REPORT_LINKS|$report_links|" \
                      index_template.html > "$module_reports/index.html"
              else
                  rm -rf "$module_reports"
              fi
          }

          # Process modules inside app_services_parent
          find "$PARENT_DIR" -mindepth 1 -maxdepth 1 -type d | while read -r module_dir; do
              if [ -d "$module_dir/reports" ]; then
                  process_module "$module_dir"
              fi
          done

          # Create main index.html
          if [ "$(find "$UPLOAD_DIR" -mindepth 1 -type d | wc -l)" -gt 0 ]; then
              module_links=""
              find "$UPLOAD_DIR" -mindepth 1 -maxdepth 1 -type d | sort | while read -r module_dir; do
                  module_name=$(basename "$module_dir")
                  module_links+="                      <a class=\"report-link\" href=\"$module_name/index.html\">$module_name</a>\\n"
              done

              sed -e "s|MODULE_TITLE|Quality Reports|" \
                  -e "s|REPORT_LINKS|$module_links|" \
                  index_template.html > "$UPLOAD_DIR/index.html"
          fi

          echo "Files to be uploaded:"
          find "$UPLOAD_DIR" -type f | wc -l

      - name: Upload Quality Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: reports/
          if-no-files-found: warn
          compression-level: 6
          overwrite: true

      - name: Upload Summary Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary
          path: reports/summary.md  

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'reports/summary.md';
            let report = '';

            if (fs.existsSync(reportPath)) {
              report = fs.readFileSync(reportPath, 'utf8');
            } else {
              report = 'No summary report available.';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: report
            });

  opn-apps-service-container:
    name: Deploy to opn ${{ github.event.inputs.service }} App ${{ github.event.inputs.environment || 'main' }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Set deployment environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PARENT_MODULE=${{ github.event.inputs.parent_module }}" >> $GITHUB_ENV
            echo "SERVICE=${{ github.event.inputs.service }}" >> $GITHUB_ENV
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=main" >> $GITHUB_ENV
          fi

      - name: Upload Summary Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary
          path: reports/summary.md  

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'reports/summary.md';
            let report = '';

            if (fs.existsSync(reportPath)) {
              report = fs.readFileSync(reportPath, 'utf8');
            } else {
              report = 'No summary report available.';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: report
            });

  opn-apps-service-container:
    name: Deploy to opn ${{ github.event.inputs.service }} App ${{ github.event.inputs.environment || 'main' }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Set deployment environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PARENT_MODULE=${{ github.event.inputs.parent_module }}" >> $GITHUB_ENV
            echo "SERVICE=${{ github.event.inputs.service }}" >> $GITHUB_ENV
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=main" >> $GITHUB_ENV
          fi

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.EKS_DEPLOY_IAM }}
          role-session-name: GitHub_OPN_Deploy_IAM_to_AWS
          aws-region: us-east-1

      - name: Install CLI Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
        
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && \
          sudo chmod +x /usr/bin/yq
        
          # Install Helm
          curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https --yes
          echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
            
          sudo apt-get update
          sudo apt-get install -y helm

      - name: Build Docker Image
        run: |
          if [ "${{ github.event.inputs.environment }}" == "main" ]; then
            export PASSPHRASE=${{ secrets.DECRYPTION_PASSWORD }}
            echo "PASSPHRASE SET"
            chmod +x ./opn-core-services-parent/$PARENT_MODULE/$SERVICE/entrypoint.sh
            echo "file executable done"
            ./opn-core-services-parent/$PARENT_MODULE/$SERVICE/entrypoint.sh
          fi
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            export PASSPHRASE=${{ secrets.DECRYPTION_PASSWORD_PROD }}
            echo "PASSPHRASE SET"
            chmod +x ./opn-core-services-parent/$PARENT_MODULE/$SERVICE/entrypoint.sh
            echo "file executable done"
            ./opn-core-services-parent/$PARENT_MODULE/$SERVICE/entrypoint.sh
          fi

      #Login to the AWS ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Tag and Push to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: container-registry
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if [ "${{ env.DEPLOY_ENV }}" == "main" ]; then
            echo "Using main Dockerfile and entrypoint.sh"
            export DEPLOY_ENV=$DEPLOY_ENV
            export PASSPHRASE=${{ secrets.DECRYPTION_PASSWORD }}
            sh docker/entrypoint.sh
          fi
      
          if [ "${{ env.DEPLOY_ENV }}" == "prod" ]; then
            echo "Using prod Dockerfile and entrypoint.sh"
            export ENV_FILE="production"
            export PASSPHRASE=${{ secrets.DECRYPTION_PASSWORD_PROD }}
            sh docker/prod/entrypoint.sh
          fi
      
          docker tag app-image-build:latest $REGISTRY/$REPOSITORY:opn-intelligence-$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:opn-intelligence-$IMAGE_TAG

      - name: Git Clone HelmNest
        run: |
          git clone https://github.com/Sahyog-Inc/HelmNest.git

      - name: Copy Values File
        run: |
          cp ./infra/$DEPLOY_ENV/values.opn-intelligence.yaml  HelmNest/helm/service/

      - name: Update Helm chart with new image tag
        working-directory: ./HelmNest
        run: |
          yq eval '.image.tag = "opn-intelligence-${{ github.sha }}"' -i helm/service/values.opn-intelligence.yaml

      - name: Authenticate with AWS EKS
        run: |
          case "${{ env.DEPLOY_ENV }}" in
            main)
              EKS_CLUSTER_NAME="${{ vars.DEV_CLUSTER }}"
              ;;
            prod)
              EKS_CLUSTER_NAME="${{ vars.PROD_CLUSTER }}"
              ;;
            *)
              echo "Unknown EKS_CLUSTER for: ${{ env.DEPLOY_ENV }}"
              exit 1
              ;;
          esac

          aws eks --region "us-east-1" update-kubeconfig --name "$EKS_CLUSTER_NAME"

      - name: Deploy Helm Chart
        working-directory: ./HelmNest
        run: |
          helm upgrade --install opn-intelligence-svc-${{ env.DEPLOY_ENV }} \
            --values helm/service/values.opn-intelligence.yaml \
            --kubeconfig /home/runner/.kube/config \
            --namespace opn-intelligence-${{ env.DEPLOY_ENV }} \
            --create-namespace \
            helm/service
            helm/service
